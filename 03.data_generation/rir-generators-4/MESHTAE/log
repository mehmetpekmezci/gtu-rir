mpekmezci@dsystm-ai1:~/workspace-python/room_impulse_response_phd_thessis/src/rir-generators-2/MESH2IR-VGAE-MSE-3$ ./run_training.sh 
MESH2IR_TRAINING_DATA env. var. is not defined
MESH2IR_TRAINING_DATA=/home/mpekmezci/RIR_DATA/MESH2IR_TRAINING_DATA
/home/mpekmezci/RIR_DATA/APARTMENT_MESH/synthetic_geometric_embeddings.pickle file is already prepared ...
/home/mpekmezci/RIR_DATA/MESH2IR_TRAINING_DATA/3D-FRONT/outputs training data is already prepared ...
/home/mpekmezci/RIR_DATA/MESH2IR_TRAINING_DATA/3D-FRONT/outputs/embeddings.pickle file is already prepared ...
/home/mpekmezci/RIR_DATA/MESH2IR_TRAINING_DATA/3D-FRONT/outputs/cache directories are already prepared ...
/home/mpekmezci/workspace-python/room_impulse_response_phd_thessis/src/rir-generators-2/MESH2IR-VGAE-MSE-3/train/MESH2IR/miscc/config.py:107: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  yaml_cfg = edict(yaml.load(f))
Using config:
{'CONFIG_NAME': 'stageI',
 'CUDA': True,
 'DATASET_NAME': 'RIR',
 'DATA_DIR': '/home/mpekmezci/RIR_DATA/MESH2IR_TRAINING_DATA/3D-FRONT/outputs',
 'EMBEDDING_TYPE': 'cnn-rnn',
 'EVAL_DIR': '',
 'GAN': {'CONDITION_DIM': 10, 'DF_DIM': 96, 'GF_DIM': 256, 'R_NUM': 4},
 'GPU_ID': '1',
 'MAX_CONNECTION_PER_NODE': 5,
 'MAX_NUM_NODES': 3000,
 'MAX_ROOM_DIM_X': 30,
 'MAX_ROOM_DIM_Y': 30,
 'MAX_ROOM_DIM_Z': 6,
 'MESH_NET': '',
 'MESH_NET_GAE_FILE': 'gae_mesh_net_trained_model.pth',
 'NET_D': '',
 'NET_G': '',
 'PRE_TRAINED_MODELS_DIR': '../pre-trained-models/',
 'RIRSIZE': 4096,
 'STAGE': 1,
 'STAGE1_G': '',
 'SYNTHETIC_GEOMETRIC_DATA_DIR': '/home/mpekmezci/RIR_DATA/APARTMENT_MESH',
 'TEXT': {'DIMENSION': 10},
 'TRAIN': {'BATCH_SIZE': 8,
           'COEFF': {'KL': 2.0},
           'DISCRIMINATOR_LR': 8e-07,
           'FLAG': True,
           'GAE_BATCH_SIZE': 32,
           'GENERATOR_LR': 8e-07,
           'LR_DECAY_EPOCH': 7,
           'MAX_EPOCH': 2000,
           'MAX_MESHNET_GAE_EPOCH': 10,
           'MESH_LR': 8e-05,
           'PRETRAINED_EPOCH': 600,
           'PRETRAINED_MODEL': '',
           'SNAPSHOT_INTERVAL': 25},
 'VIS_COUNT': 32,
 'WORKERS': 16,
 'Z_DIM': 100}
Loading embeddings ...
embeddings.pickle embeddings are loaded ...
Loading embeddings ...
synthetic_geometric_embeddings.pickle embeddings are loaded ...
len(embeddings)=8978944  len(synthetic_geometric_embeddings)=2299264
###################### GAETrainer : cfg.TRAIN.FLAG=True  ############################
encode X.shape=torch.Size([178364, 3])
encode A.shape=torch.Size([2, 988484])
encode B.shape=torch.Size([178364])
encode 1 . x.shape=torch.Size([178364, 1024])
encode 2 . x.shape=torch.Size([107040, 1024])
encode 3 . x.shape=torch.Size([64243, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
MESH_NET_GAE                             [32, 3000, 3]             40
├─GCNConv: 1-1                           [178364, 1024]            1,024
│    └─Linear: 2-1                       [178364, 1024]            3,072
│    └─SumAggregation: 2-2               [178364, 1024]            --
├─TopKPooling: 1-2                       [107040, 1024]            1,024
├─GCNConv: 1-3                           [107040, 1024]            1,024
│    └─Linear: 2-3                       [107040, 1024]            1,048,576
│    └─SumAggregation: 2-4               [107040, 1024]            --
├─TopKPooling: 1-4                       [64243, 1024]             1,024
├─GCNConv: 1-5                           [64243, 1024]             1,024
│    └─Linear: 2-5                       [64243, 1024]             1,048,576
│    └─SumAggregation: 2-6               [64243, 1024]             --
├─TopKPooling: 1-6                       [38557, 1024]             1,024
├─Linear: 1-7                            [32, 8]                   16,392
├─ReLU: 1-8                              [32, 8]                   --
├─Linear: 1-9                            [32, 8]                   16,392
├─ReLU: 1-10                             [32, 8]                   --
├─Linear: 1-11                           [32, 15000]               135,000
==========================================================================================
Total params: 2,274,192
Trainable params: 2,274,192
Non-trainable params: 0
Total mult-adds (G): 180.37
==========================================================================================
Input size (MB): 19.38
Forward/backward pass size (MB): 4587.16
Params size (MB): 9.08
Estimated Total Size (MB): 4615.63
==========================================================================================
GAE MESH NET PRETARINED MODEL DOES NOT EXISTS SO STARTING TO TRAIN THE GAE_MESH_NET MODEL ......
gae trainer epoch:0
starting GAE i=0
encode X.shape=torch.Size([44647, 3])
encode A.shape=torch.Size([2, 245004])
encode B.shape=torch.Size([44647])
encode 1 . x.shape=torch.Size([44647, 1024])
encode 2 . x.shape=torch.Size([26807, 1024])
encode 3 . x.shape=torch.Size([16103, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
loss_X=0.24910780787467957 - kl_divergence=-6.69313594698906e-05 --> loss=0.12458737194538116
[0/10][0/71852] loss: 0.1246 Total Time: 6.11sec 
 
saved_model : 0
encode X.shape=torch.Size([44926, 3])
encode A.shape=torch.Size([2, 245094])
encode B.shape=torch.Size([44926])
encode 1 . x.shape=torch.Size([44926, 1024])
encode 2 . x.shape=torch.Size([26974, 1024])
encode 3 . x.shape=torch.Size([16202, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44733, 3])
encode A.shape=torch.Size([2, 245166])
encode B.shape=torch.Size([44733])
encode 1 . x.shape=torch.Size([44733, 1024])
encode 2 . x.shape=torch.Size([26858, 1024])
encode 3 . x.shape=torch.Size([16133, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44686, 3])
encode A.shape=torch.Size([2, 244786])
encode B.shape=torch.Size([44686])
encode 1 . x.shape=torch.Size([44686, 1024])
encode 2 . x.shape=torch.Size([26832, 1024])
encode 3 . x.shape=torch.Size([16117, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44724, 3])
encode A.shape=torch.Size([2, 244906])
encode B.shape=torch.Size([44724])
encode 1 . x.shape=torch.Size([44724, 1024])
encode 2 . x.shape=torch.Size([26852, 1024])
encode 3 . x.shape=torch.Size([16128, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44743, 3])
encode A.shape=torch.Size([2, 244848])
encode B.shape=torch.Size([44743])
encode 1 . x.shape=torch.Size([44743, 1024])
encode 2 . x.shape=torch.Size([26863, 1024])
encode 3 . x.shape=torch.Size([16137, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44675, 3])
encode A.shape=torch.Size([2, 244946])
encode B.shape=torch.Size([44675])
encode 1 . x.shape=torch.Size([44675, 1024])
encode 2 . x.shape=torch.Size([26824, 1024])
encode 3 . x.shape=torch.Size([16113, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44727, 3])
encode A.shape=torch.Size([2, 244964])
encode B.shape=torch.Size([44727])
encode 1 . x.shape=torch.Size([44727, 1024])
encode 2 . x.shape=torch.Size([26853, 1024])
encode 3 . x.shape=torch.Size([16132, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44685, 3])
encode A.shape=torch.Size([2, 244320])
encode B.shape=torch.Size([44685])
encode 1 . x.shape=torch.Size([44685, 1024])
encode 2 . x.shape=torch.Size([26829, 1024])
encode 3 . x.shape=torch.Size([16115, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44906, 3])
encode A.shape=torch.Size([2, 245372])
encode B.shape=torch.Size([44906])
encode 1 . x.shape=torch.Size([44906, 1024])
encode 2 . x.shape=torch.Size([26961, 1024])
encode 3 . x.shape=torch.Size([16195, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44790, 3])
encode A.shape=torch.Size([2, 245074])
encode B.shape=torch.Size([44790])
encode 1 . x.shape=torch.Size([44790, 1024])
encode 2 . x.shape=torch.Size([26893, 1024])
encode 3 . x.shape=torch.Size([16154, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44781, 3])
encode A.shape=torch.Size([2, 245104])
encode B.shape=torch.Size([44781])
encode 1 . x.shape=torch.Size([44781, 1024])
encode 2 . x.shape=torch.Size([26891, 1024])
encode 3 . x.shape=torch.Size([16153, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44553, 3])
encode A.shape=torch.Size([2, 246968])
encode B.shape=torch.Size([44553])
encode 1 . x.shape=torch.Size([44553, 1024])
encode 2 . x.shape=torch.Size([26748, 1024])
encode 3 . x.shape=torch.Size([16068, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44545, 3])
encode A.shape=torch.Size([2, 249162])
encode B.shape=torch.Size([44545])
encode 1 . x.shape=torch.Size([44545, 1024])
encode 2 . x.shape=torch.Size([26746, 1024])
encode 3 . x.shape=torch.Size([16067, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44442, 3])
encode A.shape=torch.Size([2, 249042])
encode B.shape=torch.Size([44442])
encode 1 . x.shape=torch.Size([44442, 1024])
encode 2 . x.shape=torch.Size([26686, 1024])
encode 3 . x.shape=torch.Size([16034, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44462, 3])
encode A.shape=torch.Size([2, 248772])
encode B.shape=torch.Size([44462])
encode 1 . x.shape=torch.Size([44462, 1024])
encode 2 . x.shape=torch.Size([26698, 1024])
encode 3 . x.shape=torch.Size([16040, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44288, 3])
encode A.shape=torch.Size([2, 248852])
encode B.shape=torch.Size([44288])
encode 1 . x.shape=torch.Size([44288, 1024])
encode 2 . x.shape=torch.Size([26590, 1024])
encode 3 . x.shape=torch.Size([15972, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44244, 3])
encode A.shape=torch.Size([2, 248648])
encode B.shape=torch.Size([44244])
encode 1 . x.shape=torch.Size([44244, 1024])
encode 2 . x.shape=torch.Size([26567, 1024])
encode 3 . x.shape=torch.Size([15957, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44239, 3])
encode A.shape=torch.Size([2, 248978])
encode B.shape=torch.Size([44239])
encode 1 . x.shape=torch.Size([44239, 1024])
encode 2 . x.shape=torch.Size([26561, 1024])
encode 3 . x.shape=torch.Size([15957, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44449, 3])
encode A.shape=torch.Size([2, 249208])
encode B.shape=torch.Size([44449])
encode 1 . x.shape=torch.Size([44449, 1024])
encode 2 . x.shape=torch.Size([26690, 1024])
encode 3 . x.shape=torch.Size([16031, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44529, 3])
encode A.shape=torch.Size([2, 249102])
encode B.shape=torch.Size([44529])
encode 1 . x.shape=torch.Size([44529, 1024])
encode 2 . x.shape=torch.Size([26736, 1024])
encode 3 . x.shape=torch.Size([16059, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
[0/10][20/71852] loss: 0.1197 Total Time: 3.85sec 
 
encode X.shape=torch.Size([44331, 3])
encode A.shape=torch.Size([2, 248940])
encode B.shape=torch.Size([44331])
encode 1 . x.shape=torch.Size([44331, 1024])
encode 2 . x.shape=torch.Size([26618, 1024])
encode 3 . x.shape=torch.Size([15988, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44394, 3])
encode A.shape=torch.Size([2, 249150])
encode B.shape=torch.Size([44394])
encode 1 . x.shape=torch.Size([44394, 1024])
encode 2 . x.shape=torch.Size([26654, 1024])
encode 3 . x.shape=torch.Size([16008, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44521, 3])
encode A.shape=torch.Size([2, 249550])
encode B.shape=torch.Size([44521])
encode 1 . x.shape=torch.Size([44521, 1024])
encode 2 . x.shape=torch.Size([26734, 1024])
encode 3 . x.shape=torch.Size([16058, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44355, 3])
encode A.shape=torch.Size([2, 249090])
encode B.shape=torch.Size([44355])
encode 1 . x.shape=torch.Size([44355, 1024])
encode 2 . x.shape=torch.Size([26634, 1024])
encode 3 . x.shape=torch.Size([16001, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44688, 3])
encode A.shape=torch.Size([2, 247046])
encode B.shape=torch.Size([44688])
encode 1 . x.shape=torch.Size([44688, 1024])
encode 2 . x.shape=torch.Size([26830, 1024])
encode 3 . x.shape=torch.Size([16117, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44631, 3])
encode A.shape=torch.Size([2, 246922])
encode B.shape=torch.Size([44631])
encode 1 . x.shape=torch.Size([44631, 1024])
encode 2 . x.shape=torch.Size([26798, 1024])
encode 3 . x.shape=torch.Size([16099, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44608, 3])
encode A.shape=torch.Size([2, 246594])
encode B.shape=torch.Size([44608])
encode 1 . x.shape=torch.Size([44608, 1024])
encode 2 . x.shape=torch.Size([26783, 1024])
encode 3 . x.shape=torch.Size([16087, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44560, 3])
encode A.shape=torch.Size([2, 246118])
encode B.shape=torch.Size([44560])
encode 1 . x.shape=torch.Size([44560, 1024])
encode 2 . x.shape=torch.Size([26755, 1024])
encode 3 . x.shape=torch.Size([16071, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44569, 3])
encode A.shape=torch.Size([2, 246548])
encode B.shape=torch.Size([44569])
encode 1 . x.shape=torch.Size([44569, 1024])
encode 2 . x.shape=torch.Size([26763, 1024])
encode 3 . x.shape=torch.Size([16077, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44752, 3])
encode A.shape=torch.Size([2, 247322])
encode B.shape=torch.Size([44752])
encode 1 . x.shape=torch.Size([44752, 1024])
encode 2 . x.shape=torch.Size([26871, 1024])
encode 3 . x.shape=torch.Size([16142, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
encode X.shape=torch.Size([44680, 3])
encode A.shape=torch.Size([2, 246726])
encode B.shape=torch.Size([44680])
encode 1 . x.shape=torch.Size([44680, 1024])
encode 2 . x.shape=torch.Size([26827, 1024])
encode 3 . x.shape=torch.Size([16116, 1024])
encode 4 . x.shape=torch.Size([32, 2048])
encode 5 . sampled_z.shape=torch.Size([32, 8])
encode 5 . mean.shape=torch.Size([32, 8])
encode 5 . logstd.shape=torch.Size([32, 8])
decode 1 . Z1.shape=torch.Size([32, 15000])
decode 2 . Z1.shape=torch.Size([32, 3000, 5])
decode 3 . Z1.shape=torch.Size([32, 3000, 5])
decode 4 . ZX.shape=torch.Size([32, 3000, 5])
decode 5 . X_pred.shape=torch.Size([32, 3000, 3])
^CTraceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
  File "/home/mpekmezci/workspace-python/room_impulse_response_phd_thessis/src/rir-generators-2/MESH2IR-VGAE-MSE-3/train/MESH2IR/miscc/datasets.py", line 64, in buildDense
    indices=torch.nonzero(A[i]).squeeze()
  File "/home/mpekmezci/workspace-python/room_impulse_response_phd_thessis/src/rir-generators-2/MESH2IR-VGAE-MSE-3/train/MESH2IR/miscc/datasets.py", line 69, in buildDense
    A_[i]=indices[:cfg.MAX_CONNECTION_PER_NODE]
  File "/home/mpekmezci/workspace-python/room_impulse_response_phd_thessis/src/rir-generators-2/MESH2IR-VGAE-MSE-3/train/MESH2IR/miscc/datasets.py", line 64, in buildDense
    indices=torch.nonzero(A[i]).squeeze()
  File "/home/mpekmezci/workspace-python/room_impulse_response_phd_thessis/src/rir-generators-2/MESH2IR-VGAE-MSE-3/train/MESH2IR/miscc/datasets.py", line 69, in buildDense
    A_[i]=indices[:cfg.MAX_
